#!/usr/bin/env ruby
# @Author:      Tom Link (micathom AT gmail com)
# @License:     GPL (see http://www.gnu.org/licenses/gpl.txt)
# @Created:     2010-10-26.
# @Last Change: 2010-11-21.
# @Revision:    154

require 'optparse'
require 'rbconfig'
require 'logger'
require 'fileutils'
require 'yaml'

class VCSDo
    APPNAME = 'vcsdo'
    VERSION = '0.2'
    VCSTYPES = ['git', 'svn', 'hg', 'bzr']
    SYNONYMS = {
        'import' => 'patch',
        'apply' => 'patch',
        'ca' => 'commitall',
        'update' => 'pull',
    }
    CONFIGS = []
    if ENV['WINDIR']
        CONFIGS << File.join(File.dirname(ENV['WINDIR'].gsub(/\\/, '/')) ,'vcsdo.yml')
    else
        CONFIGS << '/etc/vcsdo.yml'
    end
    if ENV['HOME']
        CONFIGS << File.join(ENV['HOME'].gsub(/\\/, '/'), '.vcsdo.yml')
        if ENV['HOSTNAME']
            CONFIGS << File.join(ENV['HOME'].gsub(/\\/, '/'), ".vcsdo_#{ENV['HOSTNAME']}.yml")
        end
    elsif ENV['USERPROFILE']
        CONFIGS << File.join(ENV['USERPROFILE'].gsub(/\\/, '/'), 'vcsdo.yml')
    end
    CONFIGS.delete_if {|f| !File.exist?(f)}

    class AppLog
        def initialize(output=$stdout)
            @output = output
            $logger = Logger.new(output)
            $logger.progname = defined?(APPNAME) ? APPNAME : File.basename(APPNAME, '.*')
            $logger.datetime_format = "%H:%M:%S"
            AppLog.set_level
        end

        def self.set_level
            if $DEBUG
                $logger.level = Logger::DEBUG
            elsif $VERBOSE
                $logger.level = Logger::INFO
            else
                $logger.level = Logger::WARN
            end
        end
    end

    class << self

        def with_args(args)

            AppLog.new

            config = {:root => Dir.getwd}
            CONFIGS.each do |file|
                $logger.debug "Load configuration from #{file}"
                config.merge!(YAML.load_file(file))
            end
            opts = OptionParser.new do |opts|
                opts.banner =  "Usage: #{File.basename(APPNAME)} [OPTIONS] [VCSTYPE] COMMAND [ARGS ...]"
                opts.separator ' '
                opts.separator 'vcsdo is a free software with ABSOLUTELY NO WARRANTY under'
                opts.separator 'the terms of the GNU General Public License version 2 or newer.'
                opts.separator ' '
                opts.separator 'Where COMMAND can be one of:'
                opts.separator '  clone ................ create a local copy'
                opts.separator '  diff ................. show diff'
                opts.separator '  ls ................... list files'
                opts.separator '  patch|import|apply ... apply a patch'
                opts.separator '  status ............... show status message'
                opts.separator '  pull|update .......... incorporate changes'
                opts.separator '  commitall|ca ......... commit all changes on disk'
                opts.separator '  push (without ARGS: push origin master)'
                opts.separator ' '
                opts.separator 'Not every command is supported for every VCS type.'
                opts.separator 'ATTENTION: The command arguments are not normalized,'
                opts.separator 'i.e. they are passed to the VCS as provided.'
                opts.separator ' '
                opts.separator 'Supported VCS types: git, svn*, hg*'
                opts.separator '* ... partial support'
                opts.separator ' '

                opts.separator 'Options:'

                opts.on('-c', '--config YAML', String, 'Config file') do |value|
                    if File.exist?(value)
                        config.merge!(YAML.load_file(value))
                    else
                        $logger.fatal "Config file does not exist: #{value}"
                        exit 5
                    end
                end

                opts.on('-d', '--dir DIR', String, "Work in DIR") do |value|
                    config[:root] = expand_arg(config, value)
                end

                opts.on('-e', '--each [DIR]', String, "Run ARGS for each sub-directory in DIR (implies -d)") do |value|
                    config[:root] = expand_arg(config, value) unless value.nil?
                    config[:each] = true
                end

                unless CONFIGS.empty?
                    opts.separator ' '
                    opts.separator "Configuration: #{CONFIGS.join(', ')}"
                end

                opts.separator ' '
                opts.separator 'Other Options:'

                opts.on('-n', '--[no-]dry', 'Dry run') do |bool|
                    config[:dry] = true
                end

                opts.on('--debug', 'Show debug messages') do |v|
                    $DEBUG   = true
                    $VERBOSE = true
                    AppLog.set_level
                end

                opts.on('-v', '--verbose', 'Run verbosely') do |v|
                    $VERBOSE = true
                    AppLog.set_level
                end

                opts.on_tail('-h', '--help', 'Show this message') do
                    puts opts
                    exit 1
                end
            end
            $logger.debug "command-line arguments: #{args}"
            argv = opts.parse!(args)
            $logger.debug "config: #{config}"
            $logger.debug "argv: #{argv}"

            if argv.empty?
                puts "No command given"
                puts `#{APPNAME} --help`
                exit 5
            end

            config[:root] = File.expand_path(config[:root])
            if config[:each]
                config[:dirs] = Dir[File.join(config[:root], '*')]
                config[:dirs].delete_if {|d| !File.directory?(d)}
            else
                config[:dirs] = [config[:root]]
            end

            return VCSDo.new(config, argv)
        end

        def expand_arg(config, arg)
            if arg =~ /^@/ and (aliases = config['aliases'])
                arg1 = arg.sub(/^@/, '')
                if aliases.has_key?(arg1)
                    aliases[arg1]
                else
                    $logger.fatal "Unknown alias: #{arg}"
                    exit 5
                end
            else
                arg
            end
        end
        
    end

    # config ... hash
    # args   ... array of strings
    def initialize(config, args)
        @config = config
        @args   = args
    end

    def process
        argv = @args.dup
        arg1 = argv.shift
        if VCSTYPES.include?(arg1)
            vcs0 = arg1
            arg1 = argv.shift
        else
            vcs0 = nil
        end
        arg1 = SYNONYMS[arg1] || arg1
        args = argv.join(' ')
        @config[:dirs].each do |dir|
            FileUtils.cd(dir) do
                vcs = detect_vcs || vcs0
                if vcs
                    $logger.warn "Process #{dir.inspect} (#{vcs})"
                    meth = "do_#{vcs}_#{arg1}"
                    if respond_to?(meth)
                        send(meth, args)
                    else
                        $logger.warn "Command #{arg1.inspect} not supported for #{vcs} repositories"
                    end
                end
            end
        end
    end

    def detect_vcs
        if File.directory?('.git')
            'git'
        elsif File.directory?('.svn')
            'svn'
        elsif File.directory?('.hg')
            'hg'
        elsif File.directory?('.bzr')
            'bzr'
        else
            nil
        end
    end

    def run(*cmds)
        for cmd in cmds
            if @config[:dry]
                puts cmd
            else
                $logger.info cmd
                puts `#{cmd}`
                if $?.exitstatus != 0
                    $logger.error "Error #{$?.exitstatus} when running: #{cmd}"
                    return
                end
            end
        end
    end



    ###################################### git {{{1
    def do_git_clone(args)
        run "git clone #{args}"
    end

    def do_git_diff(args)
        run "git diff #{args}"
    end

    def do_git_ls(args)
        run "git ls-files #{args}"
    end

    def do_git_patch(args)
        run "git apply #{args}"
    end

    def do_git_status(args)
        run "git status #{args}"
    end

    def do_git_tag(args)
        run "git tag #{args}"
    end

    def do_git_pull(args)
        run "git pull #{args}"
    end
    
    def do_git_push(args)
        if args.empty?
            args = 'origin master'
        end
        run "git push #{args}"
    end

    def do_git_commitall(args)
        run "git add #{args} *", "git commit"
    end



    ###################################### svn {{{1
    def do_svn_diff(args)
        run "svn diff #{args}"
    end

    def do_svn_ls(args)
        run "svn ls #{args}"
    end

    def do_svn_patch(args)
        run "svn import #{args}"
    end

    def do_svn_status(args)
        run "svn status #{args}"
    end

    def do_svn_pull(args)
        run "svn update #{args}"
    end



    ###################################### hg {{{1
    def do_hg_diff(args)
        run "hg diff #{args}"
    end

    def do_hg_ls(args)
        run "hg locate #{args}"
    end

    def do_hg_patch(args)
        run "hg import #{args}"
    end

    def do_hg_status(args)
        run "hg status #{args}"
    end

    def do_hg_pull(args)
        run "hg pull #{args}", "hg update"
    end



    ###################################### bzr {{{1
    def do_bzr_clone(args)
        run "bzr checkout #{args}"
    end

    def do_bzr_diff(args)
        run "bzr diff #{args}"
    end

    def do_bzr_ls(args)
        run "bzr ls #{args}"
    end

    def do_bzr_status(args)
        run "bzr status #{args}"
    end

    def do_bzr_tag(args)
        if !args or args.empty?
            run "bzr tags"
        else
            run "bzr tag #{args}"
        end
    end

    def do_bzr_pull(args)
        run "bzr pull #{args}"
    end


end


if __FILE__ == $0
    VCSDo.with_args(ARGV).process
end


# Local Variables:
# revisionRx: REVISION\s\+=\s\+\'
# End:
